{
	"id": "SimpleInventory",
	"name": "SimpleInventory",
	"enabledTests": [
		"SimpleInventory.Inventory.AddItem.Should add a new item when inventory is empty",
		"SimpleInventory.Inventory.AddItem.Should broadcast events when bBroadcastEvent is true",
		"SimpleInventory.Inventory.AddItem.Should create multiple new stacks if quantity exceeds single stack size",
		"SimpleInventory.Inventory.AddItem.Should fill existing stack and then create a new stack with remaining items",
		"SimpleInventory.Inventory.AddItem.Should handle empty add (quantity = 0) without creating slots or events",
		"SimpleInventory.Inventory.AddItem.Should merge with an existing partially filled stack",
		"SimpleInventory.Inventory.AddItem.Should not broadcast events when bBroadcastEvent is false",
		"SimpleInventory.Inventory.AddItem.Should not merge with non-stackable item, always creates new slot",
		"SimpleInventory.Inventory.AddItem.Should stop adding when inventory reaches MaxSlots and broadcast a Full event",
		"SimpleInventory.Inventory.AddItem.Should stop early when Remaining reaches zero in Pass 1",
		"SimpleInventory.Inventory.AddItems.Should add a single unique item correctly",
		"SimpleInventory.Inventory.AddItems.Should broadcast events when bBroadcastEvent = true",
		"SimpleInventory.Inventory.AddItems.Should group duplicate identical items into a single AddItem call",
		"SimpleInventory.Inventory.AddItems.Should handle multiple different item types",
		"SimpleInventory.Inventory.AddItems.Should respect bBroadcastEvent = false",
		"SimpleInventory.Inventory.AddItems.Should return immediately when given an empty array",
		"SimpleInventory.Inventory.CanAddItems.Should handle non-stackable item correctly",
		"SimpleInventory.Inventory.CanAddItems.Should return false when required stacks exceed available empty slots",
		"SimpleInventory.Inventory.CanAddItems.Should return false when there are no empty slots and no stack space",
		"SimpleInventory.Inventory.CanAddItems.Should return false when there are no matching item stacks and no empty slots",
		"SimpleInventory.Inventory.CanAddItems.Should return true when it fits entirely in existing partial stacks",
		"SimpleInventory.Inventory.CanAddItems.Should return true when it fits exactly using multiple new stacks",
		"SimpleInventory.Inventory.CanAddItems.Should return true when it fits partially in existing stack and rest in empty slots",
		"SimpleInventory.Inventory.CanAddItems.Should return true when quantity is zero",
		"SimpleInventory.Inventory.Clear.Should broadcast a Clear event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.Clear.Should clear all slots when inventory has items",
		"SimpleInventory.Inventory.Clear.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.Inventory.Clear.Should not crash or error when clearing an already empty inventory",
		"SimpleInventory.Inventory.FindAllSlotsByItemID.Should return all slots that match the ItemID",
		"SimpleInventory.Inventory.FindAllSlotsByItemID.Should return an empty array when no slot matches the given ItemID",
		"SimpleInventory.Inventory.FindAllSlotsByItemID.Should return an empty array when the inventory is empty",
		"SimpleInventory.Inventory.FindSlotByItemID.Should return nullptr when no slot matches the given ItemID",
		"SimpleInventory.Inventory.FindSlotByItemID.Should return nullptr when the inventory is empty",
		"SimpleInventory.Inventory.FindSlotByItemID.Should return the first slot that matches the ItemID",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should respect complex predicate rules (stackable and min quantity)",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should return nullptr when no slots match the predicate",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should return nullptr when there are no slots",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should return only the first match even if multiple slots match",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should return the first slot when the first slot matches",
		"SimpleInventory.Inventory.FindSlotByPredicate.Should skip non-matching slots and return the first matching slot",
		"SimpleInventory.Inventory.FindSlotsByPredicate.Should respect complex predicate rules (stackable and min quantity)",
		"SimpleInventory.Inventory.FindSlotsByPredicate.Should return all matching slots",
		"SimpleInventory.Inventory.FindSlotsByPredicate.Should return an empty array when no slots match the predicate",
		"SimpleInventory.Inventory.FindSlotsByPredicate.Should return an empty array when there are no slots",
		"SimpleInventory.Inventory.ForceOnChange.Should broadcast a Force event",
		"SimpleInventory.Inventory.GetLength.Should return correct value",
		"SimpleInventory.Inventory.GetMaxSize.Should return correct value",
		"SimpleInventory.Inventory.GetSlot.Should return correct slot when index is valid",
		"SimpleInventory.Inventory.GetSlot.Should return nullptr when index is invalid",
		"SimpleInventory.Inventory.GetSlot.Should return nullptr when inventory is empty",
		"SimpleInventory.Inventory.GetSlots.Should return all slots",
		"SimpleInventory.Inventory.GetSlots.Should return an empty array when inventory is empty",
		"SimpleInventory.Inventory.GetStorage.Should convert inventory data to storage data",
		"SimpleInventory.Inventory.GetTotalQuantityByItemID.Should return the quantity of all items that match the ItemID",
		"SimpleInventory.Inventory.GetTotalQuantityByItemID.Should return zero when no slot matches the given ItemID",
		"SimpleInventory.Inventory.GetTotalQuantityByItemID.Should return zero when the inventory is empty",
		"SimpleInventory.Inventory.HasFreeSlot.Should return the correct value based on MaxSlots and available capacity",
		"SimpleInventory.Inventory.HasItem.Should return false when inventory is empty",
		"SimpleInventory.Inventory.HasItem.Should return false when item is not found",
		"SimpleInventory.Inventory.HasItem.Should return false when quantity in slot is less than requested",
		"SimpleInventory.Inventory.HasItem.Should return true when quantity is greater than requested",
		"SimpleInventory.Inventory.HasItem.Should return true when quantity matches exactly",
		"SimpleInventory.Inventory.HasItemWithExactCount.Should return false when inventory is empty",
		"SimpleInventory.Inventory.HasItemWithExactCount.Should return false when no slot has the specified item",
		"SimpleInventory.Inventory.HasItemWithExactCount.Should return false when slot quantity is greater than required",
		"SimpleInventory.Inventory.HasItemWithExactCount.Should return false when slot quantity is less than required",
		"SimpleInventory.Inventory.HasItemWithExactCount.Should return true when slot quantity exactly matches required",
		"SimpleInventory.Inventory.InflateFromDefinition.Should clear inventory",
		"SimpleInventory.Inventory.InflateFromDefinition.Should set properties based on Definition",
		"SimpleInventory.Inventory.InflateFromStorage.Should clear existing slots before inflating",
		"SimpleInventory.Inventory.InflateFromStorage.Should correctly set slot quantities and metadata",
		"SimpleInventory.Inventory.InflateFromStorage.Should create slots for each stored slot",
		"SimpleInventory.Inventory.InflateFromStorage.Should not broadcast events during inflate",
		"SimpleInventory.Inventory.InflateFromStorage.Should restore basic inventory metadata",
		"SimpleInventory.Inventory.MergeSlots.Should broadcast a Merge event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.MergeSlots.Should merge successfully and remove source slot",
		"SimpleInventory.Inventory.MergeSlots.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.Inventory.MergeSlots.Should return false when combined quantity exceeds target stack size",
		"SimpleInventory.Inventory.MergeSlots.Should return false when source index is invalid",
		"SimpleInventory.Inventory.MergeSlots.Should return false when target index is invalid",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should broadcast event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should fully remove slot when quantity removed equals slot quantity",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should fully remove slot when quantity removed is greater than slot quantity",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should not broadcast event when bBroadcastEvent = false",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should partially remove items when quantity is less than slot quantity",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should return without error when index is invalid",
		"SimpleInventory.Inventory.RemoveItemAtIndex.Should support multiple calls reducing slot to zero over time",
		"SimpleInventory.Inventory.RemoveItems.Should broadcast one MultiRemoval event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.RemoveItems.Should completely remove slot if quantity reaches zero",
		"SimpleInventory.Inventory.RemoveItems.Should do nothing when given an empty array",
		"SimpleInventory.Inventory.RemoveItems.Should not affect non-matching items",
		"SimpleInventory.Inventory.RemoveItems.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.Inventory.RemoveItems.Should only remove from the first matching slot",
		"SimpleInventory.Inventory.RemoveItems.Should remove one quantity per matching item",
		"SimpleInventory.Inventory.RemoveSlotAtIndex.Should broadcast an event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.RemoveSlotAtIndex.Should not broadcast an event when bBroadcastEvent = false",
		"SimpleInventory.Inventory.RemoveSlotAtIndex.Should remove the correct slot by index",
		"SimpleInventory.Inventory.RemoveSlotAtIndex.Should return without error when index is invalid",
		"SimpleInventory.Inventory.SplitSlot.Should broadcast a Split event when bBroadcastEvent = true",
		"SimpleInventory.Inventory.SplitSlot.Should not broadcast event when bBroadcastEvent = false",
		"SimpleInventory.Inventory.SplitSlot.Should return false when inventory has no free slots",
		"SimpleInventory.Inventory.SplitSlot.Should return false when slot index is invalid",
		"SimpleInventory.Inventory.SplitSlot.Should return false when split quantity exceeds slot quantity",
		"SimpleInventory.Inventory.SplitSlot.Should return false when split quantity is greater than or equal to stack size",
		"SimpleInventory.Inventory.SplitSlot.Should split successfully into two slots",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should add a new item when inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should broadcast events when bBroadcastEvent is true",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should create multiple new stacks if quantity exceeds single stack size",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should fill existing stack and then create a new stack with remaining items",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should handle empty add (quantity = 0) without creating slots or events",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should merge with an existing partially filled stack",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should not broadcast events when bBroadcastEvent is false",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should not merge with non-stackable item, always creates new slot",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should stop adding when inventory reaches MaxSlots and broadcast a Full event",
		"SimpleInventory.SimpleInventoryComponent.AddItem.Should stop early when Remaining reaches zero in Pass 1",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should add a single unique item correctly",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should broadcast events when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should group duplicate identical items into a single AddItem call",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should handle multiple different item types",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should respect bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.AddItems.Should return immediately when given an empty array",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should handle non-stackable item correctly",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return false when required stacks exceed available empty slots",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return false when there are no empty slots and no stack space",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return false when there are no matching item stacks and no empty slots",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return true when it fits entirely in existing partial stacks",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return true when it fits exactly using multiple new stacks",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return true when it fits partially in existing stack and rest in empty slots",
		"SimpleInventory.SimpleInventoryComponent.CanAddItems.Should return true when quantity is zero",
		"SimpleInventory.SimpleInventoryComponent.Clear.Should broadcast a Clear event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.Clear.Should clear all slots when inventory has items",
		"SimpleInventory.SimpleInventoryComponent.Clear.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.Clear.Should not crash or error when clearing an already empty inventory",
		"SimpleInventory.SimpleInventoryComponent.FindAllSlotsByItemID.Should return all slots that match the ItemID",
		"SimpleInventory.SimpleInventoryComponent.FindAllSlotsByItemID.Should return an empty array when no slot matches the given ItemID",
		"SimpleInventory.SimpleInventoryComponent.FindAllSlotsByItemID.Should return an empty array when the inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByItemID.Should return nullptr when no slot matches the given ItemID",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByItemID.Should return nullptr when the inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByItemID.Should return the first slot that matches the ItemID",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should respect complex predicate rules (stackable and min quantity)",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should return nullptr when no slots match the predicate",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should return nullptr when there are no slots",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should return only the first match even if multiple slots match",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should return the first slot when the first slot matches",
		"SimpleInventory.SimpleInventoryComponent.FindSlotByPredicate.Should skip non-matching slots and return the first matching slot",
		"SimpleInventory.SimpleInventoryComponent.FindSlotsByPredicate.Should respect complex predicate rules (stackable and min quantity)",
		"SimpleInventory.SimpleInventoryComponent.FindSlotsByPredicate.Should return all matching slots",
		"SimpleInventory.SimpleInventoryComponent.FindSlotsByPredicate.Should return an empty array when no slots match the predicate",
		"SimpleInventory.SimpleInventoryComponent.FindSlotsByPredicate.Should return an empty array when there are no slots",
		"SimpleInventory.SimpleInventoryComponent.ForceOnChange.Should broadcast a Force event",
		"SimpleInventory.SimpleInventoryComponent.GetLength.Should return correct value",
		"SimpleInventory.SimpleInventoryComponent.GetMaxSize.Should return correct value",
		"SimpleInventory.SimpleInventoryComponent.GetSlot.Should return correct slot when index is valid",
		"SimpleInventory.SimpleInventoryComponent.GetSlot.Should return nullptr when index is invalid",
		"SimpleInventory.SimpleInventoryComponent.GetSlot.Should return nullptr when inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.GetSlots.Should return all slots",
		"SimpleInventory.SimpleInventoryComponent.GetSlots.Should return an empty array when inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.GetStorage.Should convert inventory data to storage data",
		"SimpleInventory.SimpleInventoryComponent.GetTotalQuantityByItemID.Should return the quantity of all items that match the ItemID",
		"SimpleInventory.SimpleInventoryComponent.GetTotalQuantityByItemID.Should return zero when no slot matches the given ItemID",
		"SimpleInventory.SimpleInventoryComponent.GetTotalQuantityByItemID.Should return zero when the inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.HasFreeSlot.Should return the correct value based on MaxSlots and available capacity",
		"SimpleInventory.SimpleInventoryComponent.HasItem.Should return false when inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.HasItem.Should return false when item is not found",
		"SimpleInventory.SimpleInventoryComponent.HasItem.Should return false when quantity in slot is less than requested",
		"SimpleInventory.SimpleInventoryComponent.HasItem.Should return true when quantity is greater than requested",
		"SimpleInventory.SimpleInventoryComponent.HasItem.Should return true when quantity matches exactly",
		"SimpleInventory.SimpleInventoryComponent.HasItemWithExactCount.Should return false when inventory is empty",
		"SimpleInventory.SimpleInventoryComponent.HasItemWithExactCount.Should return false when no slot has the specified item",
		"SimpleInventory.SimpleInventoryComponent.HasItemWithExactCount.Should return false when slot quantity is greater than required",
		"SimpleInventory.SimpleInventoryComponent.HasItemWithExactCount.Should return false when slot quantity is less than required",
		"SimpleInventory.SimpleInventoryComponent.HasItemWithExactCount.Should return true when slot quantity exactly matches required",
		"SimpleInventory.SimpleInventoryComponent.InflateFromStorage.Should clear existing slots before inflating",
		"SimpleInventory.SimpleInventoryComponent.InflateFromStorage.Should correctly set slot quantities and metadata",
		"SimpleInventory.SimpleInventoryComponent.InflateFromStorage.Should create slots for each stored slot",
		"SimpleInventory.SimpleInventoryComponent.InflateFromStorage.Should not broadcast events during inflate",
		"SimpleInventory.SimpleInventoryComponent.InflateFromStorage.Should restore basic inventory metadata",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should broadcast a Merge event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should merge successfully and remove source slot",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should return false when combined quantity exceeds target stack size",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should return false when source index is invalid",
		"SimpleInventory.SimpleInventoryComponent.MergeSlots.Should return false when target index is invalid",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should broadcast event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should fully remove slot when quantity removed equals slot quantity",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should fully remove slot when quantity removed is greater than slot quantity",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should not broadcast event when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should partially remove items when quantity is less than slot quantity",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should return without error when index is invalid",
		"SimpleInventory.SimpleInventoryComponent.RemoveItemAtIndex.Should support multiple calls reducing slot to zero over time",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should broadcast one MultiRemoval event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should completely remove slot if quantity reaches zero",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should do nothing when given an empty array",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should not affect non-matching items",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should not broadcast any events when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should only remove from the first matching slot",
		"SimpleInventory.SimpleInventoryComponent.RemoveItems.Should remove one quantity per matching item",
		"SimpleInventory.SimpleInventoryComponent.RemoveSlotAtIndex.Should broadcast an event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.RemoveSlotAtIndex.Should not broadcast an event when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.RemoveSlotAtIndex.Should remove the correct slot by index",
		"SimpleInventory.SimpleInventoryComponent.RemoveSlotAtIndex.Should return without error when index is invalid",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should broadcast a Split event when bBroadcastEvent = true",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should not broadcast event when bBroadcastEvent = false",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should return false when inventory has no free slots",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should return false when slot index is invalid",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should return false when split quantity exceeds slot quantity",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should return false when split quantity is greater than or equal to stack size",
		"SimpleInventory.SimpleInventoryComponent.SplitSlot.Should split successfully into two slots",
		"SimpleInventory.SimpleInventorySubsystem.AddItem.Should add the item",
		"SimpleInventory.SimpleInventorySubsystem.AddItem.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.AddItems.Should add the items",
		"SimpleInventory.SimpleInventorySubsystem.AddItems.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.CanAddItems.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.CanAddItems.Should return correct value",
		"SimpleInventory.SimpleInventorySubsystem.Clear.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.Clear.Should remove all items from specified inventory",
		"SimpleInventory.SimpleInventorySubsystem.ClearAll.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.ClearAll.Should remove all items from all inventories",
		"SimpleInventory.SimpleInventorySubsystem.FindAllSlotsByItemID.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.FindAllSlotsByItemID.Should return correct inventory slots",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotByItemID.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotByItemID.Should return correct inventory slot",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotByPredicate.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotByPredicate.Should return correct inventory slot",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotsByPredicate.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.FindSlotsByPredicate.Should return correct inventory slots",
		"SimpleInventory.SimpleInventorySubsystem.ForceOnChange.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.ForceOnChange.Should fire a change event with type force",
		"SimpleInventory.SimpleInventorySubsystem.GetAllInventories.Should return all registered inventories",
		"SimpleInventory.SimpleInventorySubsystem.GetAllInventories.Should return an empty array when no inventories are registered",
		"SimpleInventory.SimpleInventorySubsystem.GetInventory.Should return nullptr when the inventory does not exist",
		"SimpleInventory.SimpleInventorySubsystem.GetInventory.Should return the inventory for the given ID",
		"SimpleInventory.SimpleInventorySubsystem.GetLength.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.GetLength.Should return correct length",
		"SimpleInventory.SimpleInventorySubsystem.GetMaxSize.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.GetMaxSize.Should return correct MaxSlots",
		"SimpleInventory.SimpleInventorySubsystem.GetSlot.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.GetSlot.Should return correct inventory slot",
		"SimpleInventory.SimpleInventorySubsystem.GetSlots.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.GetSlots.Should return all inventory slots",
		"SimpleInventory.SimpleInventorySubsystem.GetStorage.Should convert inventory data to storage data",
		"SimpleInventory.SimpleInventorySubsystem.GetTotalQuantityByItemID.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.GetTotalQuantityByItemID.Should return correct value",
		"SimpleInventory.SimpleInventorySubsystem.HasFreeSlot.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.HasFreeSlot.Should return correct value",
		"SimpleInventory.SimpleInventorySubsystem.HasItem.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.HasItem.Should return true when item exists and meets quantity requirements",
		"SimpleInventory.SimpleInventorySubsystem.HasItemWithExactCount.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.HasItemWithExactCount.Should return false when item exists and has incorrect count",
		"SimpleInventory.SimpleInventorySubsystem.HasItemWithExactCount.Should return true when item exists and has exact count",
		"SimpleInventory.SimpleInventorySubsystem.InflateFromStorage.Should overwrite existing inventories",
		"SimpleInventory.SimpleInventorySubsystem.InflateFromStorage.Should recreate all inventories from storage data",
		"SimpleInventory.SimpleInventorySubsystem.MergeSlots.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.MergeSlots.Should merge the two slots into one",
		"SimpleInventory.SimpleInventorySubsystem.RegisterInventoryDefinition.Should create all inventories from the definition when valid",
		"SimpleInventory.SimpleInventorySubsystem.RegisterInventoryDefinition.Should do nothing when the definition asset is invalid",
		"SimpleInventory.SimpleInventorySubsystem.RemoveItemAtIndex.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.RemoveItemAtIndex.Should remove the item quantity",
		"SimpleInventory.SimpleInventorySubsystem.RemoveItems.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.RemoveItems.Should remove the item quantity",
		"SimpleInventory.SimpleInventorySubsystem.RemoveSlotAtIndex.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.RemoveSlotAtIndex.Should remove the entire slot",
		"SimpleInventory.SimpleInventorySubsystem.SplitSlot.Should do nothing when inventory is invalid",
		"SimpleInventory.SimpleInventorySubsystem.SplitSlot.Should split the inventory slot into two"
	]
}